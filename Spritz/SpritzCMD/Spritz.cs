using Fclp;
using SpritzBackend;
using System;
using System.Diagnostics;
using System.IO;

namespace SpritzCMD
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Console.WriteLine("Welcome to Spritz!");
            FluentCommandLineParser<ApplicationArguments> p = new();

            Options defaults = new(Environment.ProcessorCount);
            p.Setup(arg => arg.AnalysisDirectory)
                .As('a', "analysisDirectory")
                .SetDefault(defaults.AnalysisDirectory)
                .WithDescription("Directory in which the results will be stored.");

            p.Setup(arg => arg.AnalyzeVariants)
                .As('b', "analyzeVariants")
                .SetDefault(defaults.AnalyzeVariants)
                .WithDescription("Analyze protein coding variations and include them in the proteogenomic database. Note: Specifying false for both AnalyzeVariants and AnalyzeIsoforms will generate a reference proteogenomic database from the Ensembl references without any variants.");

            p.Setup(arg => arg.AnalyzeIsoforms)
                .As('c', "analyzeIsoforms")
                .SetDefault(defaults.AnalyzeIsoforms)
                .WithDescription("Analyze alternative splicing events and include them in the proteogenomic database.");

            p.Setup(arg => arg.AvailableReferences)
                .As('x', "availableReferences")
                .SetDefault(false)
                .WithDescription("Save a comma-separated file with available references to analysis directory. Then, exit.");

            p.Setup(arg => arg.AnalysisSetup)
                .As('y', "analysisSetup")
                .SetDefault(false)
                .WithDescription("Perform setup required for protected access servers, given reference, species, and organism specified.");

            p.Setup(arg => arg.Fastq1)
                .As('i', "fastq1")
                .WithDescription("Comma-separated list of paths to first mate pair fastq files.");

            p.Setup(arg => arg.Fastq2)
                .As('j', "fastq2")
                .WithDescription("Comma-separated list of paths to second mate pair fastq files.");

            p.Setup(arg => arg.Fastq1SingleEnd)
                .As('f', "fastq1SingleEnd")
                .WithDescription("Comma-separated list of paths to single-end fastq files.");

            p.Setup(arg => arg.SraAccession)
                .As('s', "sraAccessionPairedEnd")
                .WithDescription("Comma-separated list of SRA accessions for paired-end experiments to download.");

            p.Setup(arg => arg.SraAccessionSingleEnd)
                .As('t', "sraAccessionSingleEnd")
                .WithDescription("Comma-separated list of SRA accessions for single-end experiments to download.");

            p.Setup(arg => arg.Threads)
                .As('p', "threads")
                .SetDefault(defaults.Threads)
                .WithDescription("Number of processors to use for analysis.");

            p.Setup(arg => arg.Reference)
                .As('r', "reference")
                .WithDescription("Reference to use, e.g. release-96,homo_sapiens,human,GRCh38. Copy-paste a line from the file you get with the -x option that retrieves available references.");

            string helpoutro = "";
            helpoutro += $"The Spritz commandline interface intended to be run within a conda environment containing the programs snakemake and mamba." + Environment.NewLine;
            helpoutro += Environment.NewLine;
            helpoutro += $"Example workflow using this tool:" + Environment.NewLine;
            helpoutro += $"1) Check out the available references with the -x command. Specify a target directory with -a." + Environment.NewLine;
            helpoutro += $"2) Run spritz with -r based on the genomes.csv file generated by 1), " + Environment.NewLine;
            helpoutro += $"and choose the workflow options -b to analyze variants, -c to analyze isoforms, or both, and results will be saved at directory specified by -a. " + Environment.NewLine;
            helpoutro += $"2b) Alternatively, specify false for both -v and -w to generate a reference proteogenomic database from the Ensembl references." + Environment.NewLine;
            helpoutro += Environment.NewLine;
            p.SetupHelp("h", "help")
                .Callback(text => Console.WriteLine(text + helpoutro));

            var result = p.Parse(args);

            string analysisDirectory = RunnerEngine.TrimQuotesOrNull(p.Object.AnalysisDirectory);
            if (!RunnerEngine.IsDirectoryWritable(analysisDirectory))
            {
                analysisDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "spritz", "results");
            }
            Console.WriteLine($"Using analysis directory {analysisDirectory}");
            Console.WriteLine();

            if (result.HelpCalled)
            {
                return;
            }
            else if (p.Object.AvailableReferences)
            {
                Console.WriteLine();
                Console.WriteLine($"Saving the list of available references to {Path.Combine(analysisDirectory, "genomes.csv")}.");
                string genomesPath = Path.Combine(Directory.GetCurrentDirectory(), "genomes.csv");
                Directory.CreateDirectory(analysisDirectory);
                string dest = Path.Combine(analysisDirectory, Path.GetFileName(genomesPath));
                if (File.Exists(dest))
                {
                    Console.WriteLine($"File {dest} already exists. Please check it out there.");
                }
                else
                {
                    File.Copy(genomesPath, dest);
                }
                return;
            }
            else
            {
                if (p.Object.Reference == null)
                {
                    throw new SpritzException("Error: No reference specified. Please specify one with the -r flag that has four elements corresponding to a line from genomes.csv.");
                }

                Options options = ParseOptions(p.Object, analysisDirectory);

                RunnerEngine runner = new(new("", options), analysisDirectory);
                runner.WriteConfig(options);
                runner.GenerateSnakemakeCommand(options, p.Object.AnalysisSetup);
                string snakemakeArguments = runner.SnakemakeCommand["snakemake ".Length..];
                Console.WriteLine($"Running `{runner.SnakemakeCommand}`.");

                Process proc = new();
                proc.StartInfo.FileName = "snakemake";
                proc.StartInfo.Arguments = snakemakeArguments;
                proc.StartInfo.UseShellExecute = false;
                proc.StartInfo.CreateNoWindow = true;
                proc.Start();
                proc.WaitForExit();
            }
        }

        private static Options ParseOptions(ApplicationArguments aa, string analysisDirectory)
        {
            Options options = new(aa.Threads);
            options.AnalysisDirectory = analysisDirectory;
            options.Fastq1 = aa.Fastq1 ?? "";
            options.Fastq2 = aa.Fastq2 ?? "";
            options.Fastq1SingleEnd = aa.Fastq1SingleEnd ?? "";
            options.SraAccession = aa.SraAccession ?? "";
            options.SraAccessionSingleEnd = aa.SraAccessionSingleEnd ?? "";
            options.Threads = aa.Threads;
            var reference = aa.Reference.Split(',');
            if (reference.Length != 4)
            {
                throw new SpritzException($"Error: the reference string \"{reference}\" does not have four comma-separated elements corresponding to a line from genomes.csv.");
            }
            options.Release = reference[0];
            options.Species = reference[1];
            options.Organism = reference[2];
            options.Reference = reference[3];
            options.AnalyzeVariants = aa.AnalyzeVariants;
            options.AnalyzeIsoforms = aa.AnalyzeIsoforms;
            return options;
        }
    }
}